WITH base_results AS (
    SELECT
        res.raceId,
        r.year,
        r.name AS race_name,
        r.round AS race_round,
        d.driverId AS driver_id,
        d.forename || ' ' || d.surname AS driver_fullname,
        substr(d.forename, 1, 1) || '. ' || d.surname AS driver_unique,
        d.code AS driver_code,  
        d.nationality AS driver_nationality,
        c.name AS team_name,
        COALESCE(tc.color, "#808080") AS team_color,
        res.points AS race_points,
        res.position AS race_position,
        res.number AS driver_number,
        res.grid AS start_position,
        res.laps,
        res.milliseconds,
        res.time AS race_time,
        res.rank AS race_rank,
        res.fastestLap,
        res.fastestLapTime,
        res.fastestLapSpeed,
        res.statusId AS status_id,
        du.url AS drivers_wikipedia_url_de,
        cu.url AS constructors_wikipedia_url_de,
        ru.url AS races_wikipedia_url_de,
        ciru.url AS circuits_wikipedia_url_de,
        seu.url AS seasons_wikipedia_url_de,
                -- DNF-loss
        (
            CASE 
                WHEN r.year BETWEEN 1950 AND 1959 THEN 
                    CASE res.grid 
                        WHEN 1 THEN 8 WHEN 2 THEN 6 WHEN 3 THEN 4 WHEN 4 THEN 3 
                        WHEN 5 THEN 2 WHEN 6 THEN 1 ELSE 0 
                    END 
                WHEN r.year = 1960 THEN 
                    CASE res.grid 
                        WHEN 1 THEN 8 WHEN 2 THEN 6 WHEN 3 THEN 4 WHEN 4 THEN 3 
                        WHEN 5 THEN 2 WHEN 6 THEN 1 ELSE 0 
                    END 
                WHEN r.year BETWEEN 1961 AND 1990 THEN 
                    CASE res.grid 
                        WHEN 1 THEN 9 WHEN 2 THEN 6 WHEN 3 THEN 4 WHEN 4 THEN 3 
                        WHEN 5 THEN 2 WHEN 6 THEN 1 ELSE 0 
                    END 
                WHEN r.year BETWEEN 1991 AND 2002 THEN 
                    CASE res.grid 
                        WHEN 1 THEN 10 WHEN 2 THEN 6 WHEN 3 THEN 4 WHEN 4 THEN 3 
                        WHEN 5 THEN 2 WHEN 6 THEN 1 ELSE 0 
                    END 
                WHEN r.year BETWEEN 2003 AND 2009 THEN 
                    CASE res.grid 
                        WHEN 1 THEN 10 WHEN 2 THEN 8 WHEN 3 THEN 6 WHEN 4 THEN 5 
                        WHEN 5 THEN 4 WHEN 6 THEN 3 WHEN 7 THEN 2 WHEN 8 THEN 1 ELSE 0 
                    END 
                WHEN r.year BETWEEN 2010 AND 2018 THEN 
                    CASE res.grid 
                        WHEN 1 THEN 25 WHEN 2 THEN 18 WHEN 3 THEN 15 WHEN 4 THEN 12 
                        WHEN 5 THEN 10 WHEN 6 THEN 8 WHEN 7 THEN 6 WHEN 8 THEN 4 
                        WHEN 9 THEN 2 WHEN 10 THEN 1 ELSE 0 
                    END 
                WHEN r.year BETWEEN 2019 AND 2023 THEN 
                    CASE res.grid 
                        WHEN 1 THEN 25 WHEN 2 THEN 18 WHEN 3 THEN 15 WHEN 4 THEN 12 
                        WHEN 5 THEN 10 WHEN 6 THEN 8 WHEN 7 THEN 6 WHEN 8 THEN 4 
                        WHEN 9 THEN 2 WHEN 10 THEN 1 ELSE 0 
                    END 
                ELSE 0  -- fallback f√ºr alle anderen Jahre
            END * (CASE WHEN res.position IS NULL THEN 1 ELSE 0 END)
        ) AS dnf_loss,
        -- berechnete felder
        CASE WHEN res.position = 1 THEN 1 ELSE 0 END AS race_wins,
        CASE WHEN res.position <= 3 THEN 1 ELSE 0 END AS podiums,
        CASE WHEN res.grid = 1 THEN 1 ELSE 0 END AS pole_positions,
        CASE WHEN res.position IS NULL THEN 1 ELSE 0 END AS dnf_count,
        res.position - res.grid AS grid_difference,
        -- zeit in Sekunden
        CAST(res.time AS FLOAT) / 1000 AS race_time_seconds,

        -- gesamt-renndauer in minuten
        CAST(res.time AS FLOAT) / 60000 AS race_duration_minutes,

        -- zeitdifferenz zum sieger
        CASE 
            WHEN res.position = 1 THEN 0 
            ELSE CAST(res.time AS FLOAT) - 
                FIRST_VALUE(CAST(res.time AS FLOAT)) OVER (PARTITION BY res.raceId ORDER BY res.position)
        END AS gap_to_winner,

        -- durchschnittliche rundenzeit
        CASE 
            WHEN res.laps > 0 THEN CAST(res.time AS FLOAT) / res.laps 
            ELSE NULL 
            END AS average_lap_time,
        -- Berechnung der Startnummer (direkt aus `results`)
        res.number AS driver_number,

        -- startplatz aus `results`
        res.grid AS start_position,

        res.fastestLap,
        res.fastestLapTime,
        res.fastestLapSpeed,

        -- position im ziel
        res.rank AS race_rank,

            
        -- dynamisches punktesystem
        CASE 
            WHEN r.year BETWEEN 1950 AND 1959 OR r.year = 1960 THEN 
                CASE res.position
                    WHEN 1 THEN 8 WHEN 2 THEN 6 WHEN 3 THEN 4 WHEN 4 THEN 3 
                    WHEN 5 THEN 2 WHEN 6 THEN 1 ELSE 0 END 
            WHEN r.year BETWEEN 1961 AND 1990 THEN 
                CASE res.position
                    WHEN 1 THEN 9 WHEN 2 THEN 6 WHEN 3 THEN 4 WHEN 4 THEN 3 
                    WHEN 5 THEN 2 WHEN 6 THEN 1 ELSE 0 END 
            WHEN r.year BETWEEN 1991 AND 2002 THEN 
                CASE res.position
                    WHEN 1 THEN 10 WHEN 2 THEN 6 WHEN 3 THEN 4 WHEN 4 THEN 3 
                    WHEN 5 THEN 2 WHEN 6 THEN 1 ELSE 0 END 
            WHEN r.year BETWEEN 2003 AND 2009 THEN 
                CASE res.position
                    WHEN 1 THEN 10 WHEN 2 THEN 8 WHEN 3 THEN 6 WHEN 4 THEN 5 
                    WHEN 5 THEN 4 WHEN 6 THEN 3 WHEN 7 THEN 2 WHEN 8 THEN 1 ELSE 0 END 
            WHEN r.year BETWEEN 2010 AND 2018 THEN 
                CASE res.position
                    WHEN 1 THEN 25 WHEN 2 THEN 18 WHEN 3 THEN 15 WHEN 4 THEN 12 
                    WHEN 5 THEN 10 WHEN 6 THEN 8 WHEN 7 THEN 6 WHEN 8 THEN 4 
                    WHEN 9 THEN 2 WHEN 10 THEN 1 ELSE 0 END 
            WHEN r.year >= 2019 THEN 
                CASE res.position
                    WHEN 1 THEN 25 WHEN 2 THEN 18 WHEN 3 THEN 15 WHEN 4 THEN 12 
                    WHEN 5 THEN 10 WHEN 6 THEN 8 WHEN 7 THEN 6 WHEN 8 THEN 4 
                    WHEN 9 THEN 2 WHEN 10 THEN 1 ELSE 0 END 
                + CASE WHEN res.fastestLap = 1 AND res.position <= 10 THEN 1 ELSE 0 END 
            ELSE 0 
        END AS adjusted_race_points,
        -- normalisierte punkte (auf aktuelles system)
        CASE 
            WHEN res.position = 1 THEN 25
            WHEN res.position = 2 THEN 18
            WHEN res.position = 3 THEN 15
            WHEN res.position = 4 THEN 12
            WHEN res.position = 5 THEN 10
            WHEN res.position = 6 THEN 8
            WHEN res.position = 7 THEN 6
            WHEN res.position = 8 THEN 4
            WHEN res.position = 9 THEN 2
            WHEN res.position = 10 THEN 1
            ELSE 0
        END + CASE WHEN res.fastestLap = 1 AND res.position <= 10 THEN 1 ELSE 0 END AS normalized_points,
                
        d.driverRef AS driver_reference,
        c.constructorRef AS constructor_reference,
        c.nationality AS constructor_nationality,
        ci.name AS circuit_name,
        ci.location AS circuit_location,
        ci.country AS circuit_country,
        ci.lat AS circuit_latitude,
        ci.lng AS circuit_longitude,
        ci.alt AS circuit_altitude

    FROM results res
    JOIN races r ON res.raceId = r.raceId  
    JOIN drivers d ON res.driverId = d.driverId
    JOIN constructors c ON res.constructorId = c.constructorId
    LEFT JOIN team_colors tc ON c.name = tc.team
    JOIN circuits ci ON r.circuitId = ci.circuitId
    LEFT JOIN drivers_urls_de du ON d.driverId = du.driverId
    LEFT JOIN constructors_urls_de cu ON c.constructorId = cu.constructorId
    LEFT JOIN races_urls_de ru ON r.raceId = ru.raceId
    LEFT JOIN circuits_urls_de ciru ON r.circuitId = ciru.circuitId
    LEFT JOIN seasons_urls_de seu ON r.year = seu.year
), 

career_driver_stats AS (    
    SELECT 
        d.driverId AS driver_id,
        d.surname || ', ' || d.forename AS stats_driver_name,
        MIN(r.year) || '-' || MAX(r.year) AS active_seasons,  
        r.year,
        COUNT(DISTINCT ds.raceId) AS total_race_entries,  
        COUNT(CASE WHEN b.start_position IS NOT NULL THEN 1 ELSE 0 END) AS total_race_starts,
        COUNT(CASE WHEN b.start_position = 1 THEN 1 ELSE 0 END) AS total_pole_positions,
        COUNT(CASE WHEN b.race_position = 1 THEN 1 ELSE 0 END) AS total_race_wins,
        COUNT(CASE WHEN b.race_position <= 3 THEN 1 ELSE 0 END) AS total_podiums,
        COUNT(CASE WHEN b.fastestLap = 1 THEN 1 ELSE 0 END) AS total_fastest_laps,  
        SUM(ds.points) AS career_total_points,
        CASE 
            WHEN r.year = (SELECT MAX(year) FROM races) THEN 'Yes' 
            ELSE 'No' 
        END AS active_driver,
        COUNT(CASE WHEN ds.position = 1 THEN 1 ELSE 0 END) AS total_championships,
        
        GROUP_CONCAT(CASE WHEN ds.position = 1 THEN r.year ELSE NULL END, ', ') AS championship_years,

        (CAST(r.year AS INTEGER) / 10) * 10 AS active_decade,

        -- berechnete quoten
        ROUND(COUNT(CASE WHEN b.start_position = 1 THEN 1 ELSE 0 END) * 1.0 / COUNT(DISTINCT ds.raceId), 3) AS pole_rate,
        ROUND(COUNT(CASE WHEN b.start_position IS NOT NULL THEN 1 ELSE 0 END) * 1.0 / COUNT(DISTINCT ds.raceId), 3) AS start_rate,
        ROUND(COUNT(CASE WHEN b.race_position = 1 THEN 1 ELSE 0 END) * 1.0 / COUNT(DISTINCT ds.raceId), 3) AS race_win_rate,
        ROUND(COUNT(CASE WHEN b.race_position <= 3 THEN 1 ELSE 0 END) * 1.0 / COUNT(DISTINCT ds.raceId), 3) AS podium_rate,
        ROUND(COUNT(CASE WHEN b.fastestLap = 1 THEN 1 ELSE 0 END) * 1.0 / COUNT(DISTINCT ds.raceId), 3) AS fast_lap_rate,
        ROUND(SUM(ds.points) * 1.0 / COUNT(DISTINCT ds.raceId), 3) AS Points_Per_Entry,
        ROUND(SUM(ds.points) * 1.0 / COUNT(CASE WHEN b.race_position IS NOT NULL THEN 1 ELSE NULL END), 3) AS points_per_race
    FROM drivers d
    LEFT JOIN driver_standings ds ON d.driverId = ds.driverId
    LEFT JOIN races r ON ds.raceId = r.raceId  
    LEFT JOIN (
        SELECT driver_id, raceId, start_position, race_position, fastestLap
        FROM base_results
    ) b ON ds.driverId = b.driver_id AND ds.raceId = b.raceId  
    GROUP BY d.driverId, r.year  
),

best_driver_per_season AS (
    SELECT 
        b.year, 
        b.driver_id,
        COUNT(b.raceId) AS season_race_count,
        SUM(b.adjusted_race_points) AS season_total_points,
        SUM(b.dnf_count) AS season_dnf_count,
        SUM(b.dnf_loss) AS season_dnf_loss,
        SUM(b.adjusted_race_points) + SUM(b.dnf_loss) AS season_extended_score  
    FROM base_results b
    JOIN races r ON b.raceId = r.raceId
    JOIN drivers d ON b.driver_Id = d.driverId
    GROUP BY b.year, b.driver_Id
),

constructor_points_per_race AS (
    SELECT 
        r.year,
        r.raceId,
        r.round AS race_round,
        r.name AS race_name,
        c.constructorId,
        c.name AS constructor_name,
        COALESCE(SUM(cr.points), 0) AS constructor_race_points,
        -- normalisierte konstrukteurspunkte (aktuelles punktesystem)
        COALESCE(SUM(
            CASE 
                WHEN res.position = 1 THEN 25
                WHEN res.position = 2 THEN 18
                WHEN res.position = 3 THEN 15
                WHEN res.position = 4 THEN 12
                WHEN res.position = 5 THEN 10
                WHEN res.position = 6 THEN 8
                WHEN res.position = 7 THEN 6
                WHEN res.position = 8 THEN 4
                WHEN res.position = 9 THEN 2
                WHEN res.position = 10 THEN 1
                ELSE 0 END 
                + CASE WHEN res.fastestLap = 1 AND res.position <= 10 THEN 1 ELSE 0 END
        ), 0) AS constructor_normalized_points
    FROM constructor_results cr
    JOIN races r ON cr.raceId = r.raceId
    JOIN constructors c ON cr.constructorId = c.constructorId
    JOIN results res ON cr.raceId = res.raceId AND cr.constructorId = res.constructorId
    GROUP BY r.year, r.raceId, r.round, r.name, c.constructorId, c.name
),

driver_stats AS (
    SELECT 
        d.driverId,
        d.surname || ', ' || d.forename AS driver_name,
        d.nationality AS nationality,
        MIN(r.year) || '-' || MAX(r.year) AS seasons,
        COUNT(DISTINCT ds.raceId) AS race_entries,
        COUNT(CASE WHEN b.race_position IS NOT NULL THEN 1 ELSE 0 END) AS race_starts,
        COUNT(CASE WHEN b.start_position = 1 THEN 1 ELSE 0 END) AS pole_positions,
        COUNT(CASE WHEN b.race_position = 1 THEN 1 ELSE 0 END) AS race_wins,
        COUNT(CASE WHEN b.race_position <= 3 THEN 1 ELSE 0 END) AS podiums,
        COUNT(CASE WHEN b.fastestLap = 1 THEN 1 ELSE 0 END) AS fastest_laps,
        SSUM(b.race_points) AS Points,
        CASE WHEN MAX(r.year) = (SELECT MAX(year) FROM races) THEN 'Yes' ELSE 'No' END AS active,
        COUNT(CASE WHEN ds.position = 1 THEN 1 ELSE 0 END) AS championships,
        GROUP_CONCAT(CASE WHEN ds.position = 1 THEN r.year ELSE NULL END) AS championship_years,
        (MIN(r.year) / 10) * 10 AS decade
    FROM drivers d
    LEFT JOIN driver_standings ds ON d.driverId = ds.driverId
    LEFT JOIN races r ON ds.raceId = r.raceId
    LEFT JOIN (
        SELECT driver_id, raceId, start_position, race_position, fastestLap
        FROM base_results
    ) b ON ds.driverId = b.driver_id AND ds.raceId = b.raceId  
    GROUP BY d.driverId
),


cumulative_points AS (
    SELECT 
        r.driverId,
        r.raceId,
        SUM(r.points) OVER (PARTITION BY r.driverId ORDER BY ra.year, ra.round) AS cumulative_points
    FROM results r
    LEFT JOIN races ra ON r.raceId = ra.raceId
),


cumulative_calc AS (
    SELECT 
        b.*, 
        s.stats_driver_name, 
        s.active_seasons, 
        s.total_race_entries, 
        s.total_pole_positions, 
        s.total_race_wins, 
        s.total_podiums, 
        s.total_fastest_laps, 
        s.career_total_points, 
        s.active_driver, 
        s.total_championships, 
        s.championship_years, 
        s.active_decade,
        bdps.season_race_count,
        bdps.season_total_points,
        bdps.season_dnf_count,
        bdps.season_dnf_loss,
        bdps.season_extended_score,

        -- falls `constructor_name` fehlt, setze "team_name*" oder "Unknown_*"
        CASE 
            WHEN cpr.constructor_name IS NULL AND b.team_name IS NOT NULL THEN b.team_name || '*' 
            WHEN b.team_name IS NULL THEN 'Unknown_*' 
            ELSE cpr.constructor_name 
        END AS constructor_name,

        COALESCE(cpr.constructor_race_points, 0) AS constructor_race_points,
        COALESCE(cpr.constructor_normalized_points, 0) AS constructor_normalized_points,

        -- kumulierte punkte pro fahrer pro saison!  
        SUM(b.race_points) OVER (
            PARTITION BY b.driver_id, b.year  
            ORDER BY b.race_round
        ) AS cumulative_points,
        
        -- fahrer-rennstatistiken (aus career_driver_stats)
        s.total_race_starts,
        s.race_win_rate,
        s.podium_rate,
        s.pole_rate,
        s.fast_lap_rate,
        s.points_per_race,

        -- zeit- und gap-berechnungen (aus base_results)
        b.race_time_seconds,
        b.race_duration_minutes,
        b.gap_to_winner,
        b.average_lap_time

    FROM base_results b
    LEFT JOIN career_driver_stats s 
        ON b.driver_id = s.driver_id
        AND b.year = s.year
    LEFT JOIN best_driver_per_season bdps  
        ON b.driver_id = bdps.driver_id
        AND b.year = bdps.year
    LEFT JOIN constructor_points_per_race cpr  
        ON b.raceId = cpr.raceId  
        AND b.team_name = cpr.constructor_name
)
SELECT * FROM cumulative_calc;